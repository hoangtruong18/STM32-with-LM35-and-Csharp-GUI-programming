
STM32F103C6_LM35_Simulation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fb8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080030c4  080030c4  000130c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800311c  0800311c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800311c  0800311c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800311c  0800311c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800311c  0800311c  0001311c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003120  08003120  00013120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  08003130  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08003130  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009dee  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a49  00000000  00000000  00029e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002b870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002c2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a42  00000000  00000000  0002cc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf4e  00000000  00000000  000436c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083348  00000000  00000000  0004f610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2958  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a00  00000000  00000000  000d29ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080030ac 	.word	0x080030ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080030ac 	.word	0x080030ac

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	214e      	movs	r1, #78	; 0x4e
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f001 fc67 	bl	8001a6c <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000028 	.word	0x20000028

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	214e      	movs	r1, #78	; 0x4e
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <lcd_send_data+0x5c>)
 80001fa:	f001 fc37 	bl	8001a6c <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000028 	.word	0x20000028

0800020c <lcd_clear>:

void lcd_clear (void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000212:	2080      	movs	r0, #128	; 0x80
 8000214:	f7ff ff9a 	bl	800014c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000218:	2300      	movs	r3, #0
 800021a:	607b      	str	r3, [r7, #4]
 800021c:	e005      	b.n	800022a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800021e:	2020      	movs	r0, #32
 8000220:	f7ff ffc4 	bl	80001ac <lcd_send_data>
	for (int i=0; i<70; i++)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3301      	adds	r3, #1
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2b45      	cmp	r3, #69	; 0x45
 800022e:	ddf6      	ble.n	800021e <lcd_clear+0x12>
	}
}
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
	...

0800023c <ADC_Select_CH0>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_Select_CH0 (void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
 800024a:	609a      	str	r2, [r3, #8]
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_0;
 800024c:	2300      	movs	r3, #0
 800024e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000250:	2301      	movs	r3, #1
 8000252:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	4619      	mov	r1, r3
 800025c:	4805      	ldr	r0, [pc, #20]	; (8000274 <ADC_Select_CH0+0x38>)
 800025e:	f000 fecf 	bl	8001000 <HAL_ADC_ConfigChannel>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <ADC_Select_CH0+0x30>
	  {
	    Error_Handler();
 8000268:	f000 fa2e 	bl	80006c8 <Error_Handler>
	  }
}
 800026c:	bf00      	nop
 800026e:	3710      	adds	r7, #16
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	2000007c 	.word	0x2000007c

08000278 <ADC_Select_CH1>:

void ADC_Select_CH1 (void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8000288:	2301      	movs	r3, #1
 800028a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800028c:	2301      	movs	r3, #1
 800028e:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	4619      	mov	r1, r3
 8000294:	4805      	ldr	r0, [pc, #20]	; (80002ac <ADC_Select_CH1+0x34>)
 8000296:	f000 feb3 	bl	8001000 <HAL_ADC_ConfigChannel>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <ADC_Select_CH1+0x2c>
	  {
	    Error_Handler();
 80002a0:	f000 fa12 	bl	80006c8 <Error_Handler>
	  }
}
 80002a4:	bf00      	nop
 80002a6:	3710      	adds	r7, #16
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	2000007c 	.word	0x2000007c

080002b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t ADC_val0;
	uint16_t ADC_val1;
	uint8_t Rx_data[10] = {0,0,0,0,0,0,0,0,0,0,0};
 80002b6:	4a28      	ldr	r2, [pc, #160]	; (8000358 <main+0xa8>)
 80002b8:	463b      	mov	r3, r7
 80002ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80002bc:	c303      	stmia	r3!, {r0, r1}
 80002be:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c0:	f000 fb54 	bl	800096c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c4:	f000 f84e 	bl	8000364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c8:	f000 f94e 	bl	8000568 <MX_GPIO_Init>
  MX_ADC1_Init();
 80002cc:	f000 f8a6 	bl	800041c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80002d0:	f000 f920 	bl	8000514 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80002d4:	f000 f8f0 	bl	80004b8 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive (&huart1, Rx_data, 4, 100);
 80002d8:	4639      	mov	r1, r7
 80002da:	2364      	movs	r3, #100	; 0x64
 80002dc:	2204      	movs	r2, #4
 80002de:	481f      	ldr	r0, [pc, #124]	; (800035c <main+0xac>)
 80002e0:	f002 fd3d 	bl	8002d5e <HAL_UART_Receive>
	  if (Rx_data[0] == 49)
 80002e4:	783b      	ldrb	r3, [r7, #0]
 80002e6:	2b31      	cmp	r3, #49	; 0x31
 80002e8:	d12f      	bne.n	800034a <main+0x9a>
		  //lcd_put_cur(0,0);
		  //lcd_send_string("Temp1: ");
		  //lcd_put_cur(1,0);
		  //lcd_send_string("Temp2: ");

		  ADC_Select_CH0();
 80002ea:	f7ff ffa7 	bl	800023c <ADC_Select_CH0>
		  HAL_ADC_Start(&hadc1);
 80002ee:	481c      	ldr	r0, [pc, #112]	; (8000360 <main+0xb0>)
 80002f0:	f000 fc9a 	bl	8000c28 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 100);
 80002f4:	2164      	movs	r1, #100	; 0x64
 80002f6:	481a      	ldr	r0, [pc, #104]	; (8000360 <main+0xb0>)
 80002f8:	f000 fd70 	bl	8000ddc <HAL_ADC_PollForConversion>
		  ADC_val0 = HAL_ADC_GetValue(&hadc1);
 80002fc:	4818      	ldr	r0, [pc, #96]	; (8000360 <main+0xb0>)
 80002fe:	f000 fe73 	bl	8000fe8 <HAL_ADC_GetValue>
 8000302:	4603      	mov	r3, r0
 8000304:	81fb      	strh	r3, [r7, #14]
		  HAL_ADC_Stop(&hadc1);
 8000306:	4816      	ldr	r0, [pc, #88]	; (8000360 <main+0xb0>)
 8000308:	f000 fd3c 	bl	8000d84 <HAL_ADC_Stop>
		  //lcd_put_cur(0,7);
		  temp_conv(ADC_val0);
 800030c:	89fb      	ldrh	r3, [r7, #14]
 800030e:	4618      	mov	r0, r3
 8000310:	f000 f958 	bl	80005c4 <temp_conv>
		  HAL_Delay(250);
 8000314:	20fa      	movs	r0, #250	; 0xfa
 8000316:	f000 fb8b 	bl	8000a30 <HAL_Delay>

		  ADC_Select_CH1();
 800031a:	f7ff ffad 	bl	8000278 <ADC_Select_CH1>
		  HAL_ADC_Start(&hadc1);
 800031e:	4810      	ldr	r0, [pc, #64]	; (8000360 <main+0xb0>)
 8000320:	f000 fc82 	bl	8000c28 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 100);
 8000324:	2164      	movs	r1, #100	; 0x64
 8000326:	480e      	ldr	r0, [pc, #56]	; (8000360 <main+0xb0>)
 8000328:	f000 fd58 	bl	8000ddc <HAL_ADC_PollForConversion>
		  ADC_val1 = HAL_ADC_GetValue(&hadc1);
 800032c:	480c      	ldr	r0, [pc, #48]	; (8000360 <main+0xb0>)
 800032e:	f000 fe5b 	bl	8000fe8 <HAL_ADC_GetValue>
 8000332:	4603      	mov	r3, r0
 8000334:	81bb      	strh	r3, [r7, #12]
		  HAL_ADC_Stop(&hadc1);
 8000336:	480a      	ldr	r0, [pc, #40]	; (8000360 <main+0xb0>)
 8000338:	f000 fd24 	bl	8000d84 <HAL_ADC_Stop>
		  //lcd_put_cur(1,7);
		  temp_conv(ADC_val1);
 800033c:	89bb      	ldrh	r3, [r7, #12]
 800033e:	4618      	mov	r0, r3
 8000340:	f000 f940 	bl	80005c4 <temp_conv>
		  HAL_Delay(250);
 8000344:	20fa      	movs	r0, #250	; 0xfa
 8000346:	f000 fb73 	bl	8000a30 <HAL_Delay>
	  }
	  if (Rx_data[0] == 48)
 800034a:	783b      	ldrb	r3, [r7, #0]
 800034c:	2b30      	cmp	r3, #48	; 0x30
 800034e:	d1c3      	bne.n	80002d8 <main+0x28>
	  {
		  lcd_clear();
 8000350:	f7ff ff5c 	bl	800020c <lcd_clear>
	  HAL_UART_Receive (&huart1, Rx_data, 4, 100);
 8000354:	e7c0      	b.n	80002d8 <main+0x28>
 8000356:	bf00      	nop
 8000358:	080030c4 	.word	0x080030c4
 800035c:	200000ac 	.word	0x200000ac
 8000360:	2000007c 	.word	0x2000007c

08000364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b094      	sub	sp, #80	; 0x50
 8000368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800036e:	2228      	movs	r2, #40	; 0x28
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f002 fe92 	bl	800309c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000378:	f107 0314 	add.w	r3, r7, #20
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	605a      	str	r2, [r3, #4]
 8000382:	609a      	str	r2, [r3, #8]
 8000384:	60da      	str	r2, [r3, #12]
 8000386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000394:	2301      	movs	r3, #1
 8000396:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800039c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a2:	2301      	movs	r3, #1
 80003a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a6:	2302      	movs	r3, #2
 80003a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 fe5c 	bl	8002078 <HAL_RCC_OscConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003c6:	f000 f97f 	bl	80006c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ca:	230f      	movs	r3, #15
 80003cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ce:	2302      	movs	r3, #2
 80003d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e0:	f107 0314 	add.w	r3, r7, #20
 80003e4:	2102      	movs	r1, #2
 80003e6:	4618      	mov	r0, r3
 80003e8:	f002 f8c6 	bl	8002578 <HAL_RCC_ClockConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003f2:	f000 f969 	bl	80006c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003f6:	2302      	movs	r3, #2
 80003f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80003fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003fe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	4618      	mov	r0, r3
 8000404:	f002 fa52 	bl	80028ac <HAL_RCCEx_PeriphCLKConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800040e:	f000 f95b 	bl	80006c8 <Error_Handler>
  }
}
 8000412:	bf00      	nop
 8000414:	3750      	adds	r7, #80	; 0x50
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800042c:	4b20      	ldr	r3, [pc, #128]	; (80004b0 <MX_ADC1_Init+0x94>)
 800042e:	4a21      	ldr	r2, [pc, #132]	; (80004b4 <MX_ADC1_Init+0x98>)
 8000430:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000432:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <MX_ADC1_Init+0x94>)
 8000434:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000438:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800043a:	4b1d      	ldr	r3, [pc, #116]	; (80004b0 <MX_ADC1_Init+0x94>)
 800043c:	2201      	movs	r2, #1
 800043e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <MX_ADC1_Init+0x94>)
 8000442:	2200      	movs	r2, #0
 8000444:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <MX_ADC1_Init+0x94>)
 8000448:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800044c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800044e:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <MX_ADC1_Init+0x94>)
 8000450:	2200      	movs	r2, #0
 8000452:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000454:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <MX_ADC1_Init+0x94>)
 8000456:	2202      	movs	r2, #2
 8000458:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800045a:	4815      	ldr	r0, [pc, #84]	; (80004b0 <MX_ADC1_Init+0x94>)
 800045c:	f000 fb0c 	bl	8000a78 <HAL_ADC_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000466:	f000 f92f 	bl	80006c8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800046a:	2300      	movs	r3, #0
 800046c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800046e:	2301      	movs	r3, #1
 8000470:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	4619      	mov	r1, r3
 800047a:	480d      	ldr	r0, [pc, #52]	; (80004b0 <MX_ADC1_Init+0x94>)
 800047c:	f000 fdc0 	bl	8001000 <HAL_ADC_ConfigChannel>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000486:	f000 f91f 	bl	80006c8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800048a:	2301      	movs	r3, #1
 800048c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800048e:	2302      	movs	r3, #2
 8000490:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	4619      	mov	r1, r3
 8000496:	4806      	ldr	r0, [pc, #24]	; (80004b0 <MX_ADC1_Init+0x94>)
 8000498:	f000 fdb2 	bl	8001000 <HAL_ADC_ConfigChannel>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80004a2:	f000 f911 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
//////
  /* USER CODE END ADC1_Init 2 */

}
 80004a6:	bf00      	nop
 80004a8:	3710      	adds	r7, #16
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	2000007c 	.word	0x2000007c
 80004b4:	40012400 	.word	0x40012400

080004b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004bc:	4b12      	ldr	r3, [pc, #72]	; (8000508 <MX_I2C1_Init+0x50>)
 80004be:	4a13      	ldr	r2, [pc, #76]	; (800050c <MX_I2C1_Init+0x54>)
 80004c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80004c2:	4b11      	ldr	r3, [pc, #68]	; (8000508 <MX_I2C1_Init+0x50>)
 80004c4:	4a12      	ldr	r2, [pc, #72]	; (8000510 <MX_I2C1_Init+0x58>)
 80004c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004c8:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <MX_I2C1_Init+0x50>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <MX_I2C1_Init+0x50>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <MX_I2C1_Init+0x50>)
 80004d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004dc:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <MX_I2C1_Init+0x50>)
 80004de:	2200      	movs	r2, #0
 80004e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <MX_I2C1_Init+0x50>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004e8:	4b07      	ldr	r3, [pc, #28]	; (8000508 <MX_I2C1_Init+0x50>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <MX_I2C1_Init+0x50>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004f4:	4804      	ldr	r0, [pc, #16]	; (8000508 <MX_I2C1_Init+0x50>)
 80004f6:	f001 f975 	bl	80017e4 <HAL_I2C_Init>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000500:	f000 f8e2 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000028 	.word	0x20000028
 800050c:	40005400 	.word	0x40005400
 8000510:	000186a0 	.word	0x000186a0

08000514 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_USART1_UART_Init+0x4c>)
 800051a:	4a12      	ldr	r2, [pc, #72]	; (8000564 <MX_USART1_UART_Init+0x50>)
 800051c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800051e:	4b10      	ldr	r3, [pc, #64]	; (8000560 <MX_USART1_UART_Init+0x4c>)
 8000520:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000524:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <MX_USART1_UART_Init+0x4c>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <MX_USART1_UART_Init+0x4c>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <MX_USART1_UART_Init+0x4c>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <MX_USART1_UART_Init+0x4c>)
 800053a:	220c      	movs	r2, #12
 800053c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <MX_USART1_UART_Init+0x4c>)
 8000540:	2200      	movs	r2, #0
 8000542:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <MX_USART1_UART_Init+0x4c>)
 8000546:	2200      	movs	r2, #0
 8000548:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800054a:	4805      	ldr	r0, [pc, #20]	; (8000560 <MX_USART1_UART_Init+0x4c>)
 800054c:	f002 fb28 	bl	8002ba0 <HAL_UART_Init>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000556:	f000 f8b7 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	200000ac 	.word	0x200000ac
 8000564:	40013800 	.word	0x40013800

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056e:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <MX_GPIO_Init+0x58>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	4a13      	ldr	r2, [pc, #76]	; (80005c0 <MX_GPIO_Init+0x58>)
 8000574:	f043 0320 	orr.w	r3, r3, #32
 8000578:	6193      	str	r3, [r2, #24]
 800057a:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_GPIO_Init+0x58>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	f003 0320 	and.w	r3, r3, #32
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_GPIO_Init+0x58>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <MX_GPIO_Init+0x58>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	6193      	str	r3, [r2, #24]
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <MX_GPIO_Init+0x58>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <MX_GPIO_Init+0x58>)
 80005a0:	699b      	ldr	r3, [r3, #24]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <MX_GPIO_Init+0x58>)
 80005a4:	f043 0308 	orr.w	r3, r3, #8
 80005a8:	6193      	str	r3, [r2, #24]
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <MX_GPIO_Init+0x58>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	f003 0308 	and.w	r3, r3, #8
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	40021000 	.word	0x40021000

080005c4 <temp_conv>:

/* USER CODE BEGIN 4 */
void temp_conv(uint16_t temp_var)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	80fb      	strh	r3, [r7, #6]
	uint32_t var1 = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
	var1 = temp_var * 5 * 100 * 1000 / 4095;
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	4a16      	ldr	r2, [pc, #88]	; (8000630 <temp_conv+0x6c>)
 80005d6:	fb02 f303 	mul.w	r3, r2, r3
 80005da:	4a16      	ldr	r2, [pc, #88]	; (8000634 <temp_conv+0x70>)
 80005dc:	fb82 1203 	smull	r1, r2, r2, r3
 80005e0:	441a      	add	r2, r3
 80005e2:	12d2      	asrs	r2, r2, #11
 80005e4:	17db      	asrs	r3, r3, #31
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	60fb      	str	r3, [r7, #12]
	if ((var1 - (var1/10)*10) >= 5)
 80005ea:	68f9      	ldr	r1, [r7, #12]
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <temp_conv+0x74>)
 80005ee:	fba3 2301 	umull	r2, r3, r3, r1
 80005f2:	08da      	lsrs	r2, r3, #3
 80005f4:	4613      	mov	r3, r2
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	4413      	add	r3, r2
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	1aca      	subs	r2, r1, r3
 80005fe:	2a04      	cmp	r2, #4
 8000600:	d907      	bls.n	8000612 <temp_conv+0x4e>
	{
		var1 = (var1 + 10)/10;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	330a      	adds	r3, #10
 8000606:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <temp_conv+0x74>)
 8000608:	fba2 2303 	umull	r2, r3, r2, r3
 800060c:	08db      	lsrs	r3, r3, #3
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	e005      	b.n	800061e <temp_conv+0x5a>
	}
	else
	{
		var1 = var1/10;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	4a08      	ldr	r2, [pc, #32]	; (8000638 <temp_conv+0x74>)
 8000616:	fba2 2303 	umull	r2, r3, r2, r3
 800061a:	08db      	lsrs	r3, r3, #3
 800061c:	60fb      	str	r3, [r7, #12]
	}
	print_char_ADC(temp_var);
 800061e:	88fb      	ldrh	r3, [r7, #6]
 8000620:	4618      	mov	r0, r3
 8000622:	f000 f80b 	bl	800063c <print_char_ADC>
	//print_char(var1);
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	0007a120 	.word	0x0007a120
 8000634:	80080081 	.word	0x80080081
 8000638:	cccccccd 	.word	0xcccccccd

0800063c <print_char_ADC>:
void print_char_ADC(uint32_t num_var)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	uint8_t char_num_var[] = {"0000\r\n"};
 8000644:	4a1d      	ldr	r2, [pc, #116]	; (80006bc <print_char_ADC+0x80>)
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800064e:	6018      	str	r0, [r3, #0]
 8000650:	3304      	adds	r3, #4
 8000652:	8019      	strh	r1, [r3, #0]
 8000654:	3302      	adds	r3, #2
 8000656:	0c0a      	lsrs	r2, r1, #16
 8000658:	701a      	strb	r2, [r3, #0]
	uint8_t i = 3;
 800065a:	2303      	movs	r3, #3
 800065c:	73fb      	strb	r3, [r7, #15]
	while(num_var != 0)
 800065e:	e01b      	b.n	8000698 <print_char_ADC+0x5c>
	{
		char_num_var[i] = (num_var % 10) + 48;
 8000660:	6879      	ldr	r1, [r7, #4]
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <print_char_ADC+0x84>)
 8000664:	fba3 2301 	umull	r2, r3, r3, r1
 8000668:	08da      	lsrs	r2, r3, #3
 800066a:	4613      	mov	r3, r2
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	1aca      	subs	r2, r1, r3
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	3230      	adds	r2, #48	; 0x30
 800067a:	b2d2      	uxtb	r2, r2
 800067c:	f107 0110 	add.w	r1, r7, #16
 8000680:	440b      	add	r3, r1
 8000682:	f803 2c08 	strb.w	r2, [r3, #-8]
		num_var = num_var/10;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a0d      	ldr	r2, [pc, #52]	; (80006c0 <print_char_ADC+0x84>)
 800068a:	fba2 2303 	umull	r2, r3, r2, r3
 800068e:	08db      	lsrs	r3, r3, #3
 8000690:	607b      	str	r3, [r7, #4]
		i--;
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	3b01      	subs	r3, #1
 8000696:	73fb      	strb	r3, [r7, #15]
	while(num_var != 0)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d1e0      	bne.n	8000660 <print_char_ADC+0x24>
	}
	HAL_UART_Transmit(&huart1, &char_num_var[0], 6, 0xFFFF);
 800069e:	f107 0108 	add.w	r1, r7, #8
 80006a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006a6:	2206      	movs	r2, #6
 80006a8:	4806      	ldr	r0, [pc, #24]	; (80006c4 <print_char_ADC+0x88>)
 80006aa:	f002 fac6 	bl	8002c3a <HAL_UART_Transmit>
	HAL_Delay(1);
 80006ae:	2001      	movs	r0, #1
 80006b0:	f000 f9be 	bl	8000a30 <HAL_Delay>
}
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	080030d0 	.word	0x080030d0
 80006c0:	cccccccd 	.word	0xcccccccd
 80006c4:	200000ac 	.word	0x200000ac

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <Error_Handler+0x8>
	...

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <HAL_MspInit+0x5c>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	4a14      	ldr	r2, [pc, #80]	; (8000730 <HAL_MspInit+0x5c>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6193      	str	r3, [r2, #24]
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_MspInit+0x5c>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <HAL_MspInit+0x5c>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	4a0e      	ldr	r2, [pc, #56]	; (8000730 <HAL_MspInit+0x5c>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fc:	61d3      	str	r3, [r2, #28]
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <HAL_MspInit+0x5c>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <HAL_MspInit+0x60>)
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	4a04      	ldr	r2, [pc, #16]	; (8000734 <HAL_MspInit+0x60>)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	40021000 	.word	0x40021000
 8000734:	40010000 	.word	0x40010000

08000738 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <HAL_ADC_MspInit+0x6c>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d121      	bne.n	800079c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <HAL_ADC_MspInit+0x70>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <HAL_ADC_MspInit+0x70>)
 800075e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <HAL_ADC_MspInit+0x70>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <HAL_ADC_MspInit+0x70>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a0c      	ldr	r2, [pc, #48]	; (80007a8 <HAL_ADC_MspInit+0x70>)
 8000776:	f043 0304 	orr.w	r3, r3, #4
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <HAL_ADC_MspInit+0x70>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f003 0304 	and.w	r3, r3, #4
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000788:	2303      	movs	r3, #3
 800078a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800078c:	2303      	movs	r3, #3
 800078e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	4619      	mov	r1, r3
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <HAL_ADC_MspInit+0x74>)
 8000798:	f000 feaa 	bl	80014f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40012400 	.word	0x40012400
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40010800 	.word	0x40010800

080007b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 0310 	add.w	r3, r7, #16
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <HAL_I2C_MspInit+0x70>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d123      	bne.n	8000818 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <HAL_I2C_MspInit+0x74>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a13      	ldr	r2, [pc, #76]	; (8000824 <HAL_I2C_MspInit+0x74>)
 80007d6:	f043 0308 	orr.w	r3, r3, #8
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <HAL_I2C_MspInit+0x74>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f003 0308 	and.w	r3, r3, #8
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007e8:	23c0      	movs	r3, #192	; 0xc0
 80007ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ec:	2312      	movs	r3, #18
 80007ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	4619      	mov	r1, r3
 80007fa:	480b      	ldr	r0, [pc, #44]	; (8000828 <HAL_I2C_MspInit+0x78>)
 80007fc:	f000 fe78 	bl	80014f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <HAL_I2C_MspInit+0x74>)
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	4a07      	ldr	r2, [pc, #28]	; (8000824 <HAL_I2C_MspInit+0x74>)
 8000806:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800080a:	61d3      	str	r3, [r2, #28]
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <HAL_I2C_MspInit+0x74>)
 800080e:	69db      	ldr	r3, [r3, #28]
 8000810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000818:	bf00      	nop
 800081a:	3720      	adds	r7, #32
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40005400 	.word	0x40005400
 8000824:	40021000 	.word	0x40021000
 8000828:	40010c00 	.word	0x40010c00

0800082c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0310 	add.w	r3, r7, #16
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <HAL_UART_MspInit+0x8c>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d131      	bne.n	80008b0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <HAL_UART_MspInit+0x90>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	4a1a      	ldr	r2, [pc, #104]	; (80008bc <HAL_UART_MspInit+0x90>)
 8000852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000856:	6193      	str	r3, [r2, #24]
 8000858:	4b18      	ldr	r3, [pc, #96]	; (80008bc <HAL_UART_MspInit+0x90>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_UART_MspInit+0x90>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a14      	ldr	r2, [pc, #80]	; (80008bc <HAL_UART_MspInit+0x90>)
 800086a:	f043 0304 	orr.w	r3, r3, #4
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_UART_MspInit+0x90>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f003 0304 	and.w	r3, r3, #4
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800087c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000880:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0310 	add.w	r3, r7, #16
 800088e:	4619      	mov	r1, r3
 8000890:	480b      	ldr	r0, [pc, #44]	; (80008c0 <HAL_UART_MspInit+0x94>)
 8000892:	f000 fe2d 	bl	80014f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	4619      	mov	r1, r3
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <HAL_UART_MspInit+0x94>)
 80008ac:	f000 fe20 	bl	80014f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008b0:	bf00      	nop
 80008b2:	3720      	adds	r7, #32
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40013800 	.word	0x40013800
 80008bc:	40021000 	.word	0x40021000
 80008c0:	40010800 	.word	0x40010800

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <NMI_Handler+0x4>

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <MemManage_Handler+0x4>

080008d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr

080008ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090a:	f000 f875 	bl	80009f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}

08000912 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
	...

08000920 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000920:	480c      	ldr	r0, [pc, #48]	; (8000954 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000922:	490d      	ldr	r1, [pc, #52]	; (8000958 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000924:	4a0d      	ldr	r2, [pc, #52]	; (800095c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000938:	4c0a      	ldr	r4, [pc, #40]	; (8000964 <LoopFillZerobss+0x22>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000946:	f7ff ffe4 	bl	8000912 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094a:	f002 fb83 	bl	8003054 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800094e:	f7ff fcaf 	bl	80002b0 <main>
  bx lr
 8000952:	4770      	bx	lr
  ldr r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000958:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800095c:	08003124 	.word	0x08003124
  ldr r2, =_sbss
 8000960:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000964:	200000f4 	.word	0x200000f4

08000968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC1_2_IRQHandler>
	...

0800096c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <HAL_Init+0x28>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a07      	ldr	r2, [pc, #28]	; (8000994 <HAL_Init+0x28>)
 8000976:	f043 0310 	orr.w	r3, r3, #16
 800097a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800097c:	2003      	movs	r0, #3
 800097e:	f000 fd83 	bl	8001488 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000982:	200f      	movs	r0, #15
 8000984:	f000 f808 	bl	8000998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000988:	f7ff fea4 	bl	80006d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40022000 	.word	0x40022000

08000998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <HAL_InitTick+0x54>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_InitTick+0x58>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 fd8d 	bl	80014d6 <HAL_SYSTICK_Config>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00e      	b.n	80009e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b0f      	cmp	r3, #15
 80009ca:	d80a      	bhi.n	80009e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009cc:	2200      	movs	r2, #0
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f000 fd63 	bl	800149e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d8:	4a06      	ldr	r2, [pc, #24]	; (80009f4 <HAL_InitTick+0x5c>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009de:	2300      	movs	r3, #0
 80009e0:	e000      	b.n	80009e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000000 	.word	0x20000000
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000004 	.word	0x20000004

080009f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_IncTick+0x1c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <HAL_IncTick+0x20>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	4a03      	ldr	r2, [pc, #12]	; (8000a18 <HAL_IncTick+0x20>)
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	20000008 	.word	0x20000008
 8000a18:	200000f0 	.word	0x200000f0

08000a1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b02      	ldr	r3, [pc, #8]	; (8000a2c <HAL_GetTick+0x10>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	200000f0 	.word	0x200000f0

08000a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a38:	f7ff fff0 	bl	8000a1c <HAL_GetTick>
 8000a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a48:	d005      	beq.n	8000a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_Delay+0x44>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4413      	add	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a56:	bf00      	nop
 8000a58:	f7ff ffe0 	bl	8000a1c <HAL_GetTick>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d8f7      	bhi.n	8000a58 <HAL_Delay+0x28>
  {
  }
}
 8000a68:	bf00      	nop
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000008 	.word	0x20000008

08000a78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a80:	2300      	movs	r3, #0
 8000a82:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a84:	2300      	movs	r3, #0
 8000a86:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d101      	bne.n	8000a9a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e0be      	b.n	8000c18 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d109      	bne.n	8000abc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff fe3e 	bl	8000738 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f000 fbf1 	bl	80012a4 <ADC_ConversionStop_Disable>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aca:	f003 0310 	and.w	r3, r3, #16
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f040 8099 	bne.w	8000c06 <HAL_ADC_Init+0x18e>
 8000ad4:	7dfb      	ldrb	r3, [r7, #23]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f040 8095 	bne.w	8000c06 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ae4:	f023 0302 	bic.w	r3, r3, #2
 8000ae8:	f043 0202 	orr.w	r2, r3, #2
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000af8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	7b1b      	ldrb	r3, [r3, #12]
 8000afe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b00:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b10:	d003      	beq.n	8000b1a <HAL_ADC_Init+0xa2>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d102      	bne.n	8000b20 <HAL_ADC_Init+0xa8>
 8000b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b1e:	e000      	b.n	8000b22 <HAL_ADC_Init+0xaa>
 8000b20:	2300      	movs	r3, #0
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	7d1b      	ldrb	r3, [r3, #20]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d119      	bne.n	8000b64 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7b1b      	ldrb	r3, [r3, #12]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d109      	bne.n	8000b4c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	035a      	lsls	r2, r3, #13
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	e00b      	b.n	8000b64 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b50:	f043 0220 	orr.w	r2, r3, #32
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b5c:	f043 0201 	orr.w	r2, r3, #1
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	430a      	orrs	r2, r1
 8000b76:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	689a      	ldr	r2, [r3, #8]
 8000b7e:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <HAL_ADC_Init+0x1a8>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	6812      	ldr	r2, [r2, #0]
 8000b86:	68b9      	ldr	r1, [r7, #8]
 8000b88:	430b      	orrs	r3, r1
 8000b8a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b94:	d003      	beq.n	8000b9e <HAL_ADC_Init+0x126>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d104      	bne.n	8000ba8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	691b      	ldr	r3, [r3, #16]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	051b      	lsls	r3, r3, #20
 8000ba6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <HAL_ADC_Init+0x1ac>)
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d10b      	bne.n	8000be4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd6:	f023 0303 	bic.w	r3, r3, #3
 8000bda:	f043 0201 	orr.w	r2, r3, #1
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000be2:	e018      	b.n	8000c16 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be8:	f023 0312 	bic.w	r3, r3, #18
 8000bec:	f043 0210 	orr.w	r2, r3, #16
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf8:	f043 0201 	orr.w	r2, r3, #1
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c04:	e007      	b.n	8000c16 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0a:	f043 0210 	orr.w	r2, r3, #16
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	ffe1f7fd 	.word	0xffe1f7fd
 8000c24:	ff1f0efe 	.word	0xff1f0efe

08000c28 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c30:	2300      	movs	r3, #0
 8000c32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d101      	bne.n	8000c42 <HAL_ADC_Start+0x1a>
 8000c3e:	2302      	movs	r3, #2
 8000c40:	e098      	b.n	8000d74 <HAL_ADC_Start+0x14c>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2201      	movs	r2, #1
 8000c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f000 fad0 	bl	80011f0 <ADC_Enable>
 8000c50:	4603      	mov	r3, r0
 8000c52:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8087 	bne.w	8000d6a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c64:	f023 0301 	bic.w	r3, r3, #1
 8000c68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a41      	ldr	r2, [pc, #260]	; (8000d7c <HAL_ADC_Start+0x154>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d105      	bne.n	8000c86 <HAL_ADC_Start+0x5e>
 8000c7a:	4b41      	ldr	r3, [pc, #260]	; (8000d80 <HAL_ADC_Start+0x158>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d115      	bne.n	8000cb2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d026      	beq.n	8000cee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ca8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cb0:	e01d      	b.n	8000cee <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a2f      	ldr	r2, [pc, #188]	; (8000d80 <HAL_ADC_Start+0x158>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d004      	beq.n	8000cd2 <HAL_ADC_Start+0xaa>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a2b      	ldr	r2, [pc, #172]	; (8000d7c <HAL_ADC_Start+0x154>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d10d      	bne.n	8000cee <HAL_ADC_Start+0xc6>
 8000cd2:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <HAL_ADC_Start+0x158>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d007      	beq.n	8000cee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ce6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d006      	beq.n	8000d08 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfe:	f023 0206 	bic.w	r2, r3, #6
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d06:	e002      	b.n	8000d0e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f06f 0202 	mvn.w	r2, #2
 8000d1e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d2a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d2e:	d113      	bne.n	8000d58 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d34:	4a11      	ldr	r2, [pc, #68]	; (8000d7c <HAL_ADC_Start+0x154>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d105      	bne.n	8000d46 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <HAL_ADC_Start+0x158>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d108      	bne.n	8000d58 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	e00c      	b.n	8000d72 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	e003      	b.n	8000d72 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40012800 	.word	0x40012800
 8000d80:	40012400 	.word	0x40012400

08000d84 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d101      	bne.n	8000d9e <HAL_ADC_Stop+0x1a>
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	e01a      	b.n	8000dd4 <HAL_ADC_Stop+0x50>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2201      	movs	r2, #1
 8000da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f000 fa7c 	bl	80012a4 <ADC_ConversionStop_Disable>
 8000dac:	4603      	mov	r3, r0
 8000dae:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d109      	bne.n	8000dca <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000dbe:	f023 0301 	bic.w	r3, r3, #1
 8000dc2:	f043 0201 	orr.w	r2, r3, #1
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b087      	sub	sp, #28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000df2:	f7ff fe13 	bl	8000a1c <HAL_GetTick>
 8000df6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d00b      	beq.n	8000e1e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0a:	f043 0220 	orr.w	r2, r3, #32
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e0d3      	b.n	8000fc6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d131      	bne.n	8000e90 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d12a      	bne.n	8000e90 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e3a:	e021      	b.n	8000e80 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e42:	d01d      	beq.n	8000e80 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d007      	beq.n	8000e5a <HAL_ADC_PollForConversion+0x7e>
 8000e4a:	f7ff fde7 	bl	8000a1c <HAL_GetTick>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d212      	bcs.n	8000e80 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10b      	bne.n	8000e80 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6c:	f043 0204 	orr.w	r2, r3, #4
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e0a2      	b.n	8000fc6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0d6      	beq.n	8000e3c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e8e:	e070      	b.n	8000f72 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000e90:	4b4f      	ldr	r3, [pc, #316]	; (8000fd0 <HAL_ADC_PollForConversion+0x1f4>)
 8000e92:	681c      	ldr	r4, [r3, #0]
 8000e94:	2002      	movs	r0, #2
 8000e96:	f001 fdbf 	bl	8002a18 <HAL_RCCEx_GetPeriphCLKFreq>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6919      	ldr	r1, [r3, #16]
 8000ea6:	4b4b      	ldr	r3, [pc, #300]	; (8000fd4 <HAL_ADC_PollForConversion+0x1f8>)
 8000ea8:	400b      	ands	r3, r1
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d118      	bne.n	8000ee0 <HAL_ADC_PollForConversion+0x104>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	68d9      	ldr	r1, [r3, #12]
 8000eb4:	4b48      	ldr	r3, [pc, #288]	; (8000fd8 <HAL_ADC_PollForConversion+0x1fc>)
 8000eb6:	400b      	ands	r3, r1
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d111      	bne.n	8000ee0 <HAL_ADC_PollForConversion+0x104>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	6919      	ldr	r1, [r3, #16]
 8000ec2:	4b46      	ldr	r3, [pc, #280]	; (8000fdc <HAL_ADC_PollForConversion+0x200>)
 8000ec4:	400b      	ands	r3, r1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d108      	bne.n	8000edc <HAL_ADC_PollForConversion+0x100>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	68d9      	ldr	r1, [r3, #12]
 8000ed0:	4b43      	ldr	r3, [pc, #268]	; (8000fe0 <HAL_ADC_PollForConversion+0x204>)
 8000ed2:	400b      	ands	r3, r1
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d101      	bne.n	8000edc <HAL_ADC_PollForConversion+0x100>
 8000ed8:	2314      	movs	r3, #20
 8000eda:	e020      	b.n	8000f1e <HAL_ADC_PollForConversion+0x142>
 8000edc:	2329      	movs	r3, #41	; 0x29
 8000ede:	e01e      	b.n	8000f1e <HAL_ADC_PollForConversion+0x142>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	6919      	ldr	r1, [r3, #16]
 8000ee6:	4b3d      	ldr	r3, [pc, #244]	; (8000fdc <HAL_ADC_PollForConversion+0x200>)
 8000ee8:	400b      	ands	r3, r1
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d106      	bne.n	8000efc <HAL_ADC_PollForConversion+0x120>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	68d9      	ldr	r1, [r3, #12]
 8000ef4:	4b3a      	ldr	r3, [pc, #232]	; (8000fe0 <HAL_ADC_PollForConversion+0x204>)
 8000ef6:	400b      	ands	r3, r1
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00d      	beq.n	8000f18 <HAL_ADC_PollForConversion+0x13c>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6919      	ldr	r1, [r3, #16]
 8000f02:	4b38      	ldr	r3, [pc, #224]	; (8000fe4 <HAL_ADC_PollForConversion+0x208>)
 8000f04:	400b      	ands	r3, r1
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d108      	bne.n	8000f1c <HAL_ADC_PollForConversion+0x140>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68d9      	ldr	r1, [r3, #12]
 8000f10:	4b34      	ldr	r3, [pc, #208]	; (8000fe4 <HAL_ADC_PollForConversion+0x208>)
 8000f12:	400b      	ands	r3, r1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d101      	bne.n	8000f1c <HAL_ADC_PollForConversion+0x140>
 8000f18:	2354      	movs	r3, #84	; 0x54
 8000f1a:	e000      	b.n	8000f1e <HAL_ADC_PollForConversion+0x142>
 8000f1c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000f1e:	fb02 f303 	mul.w	r3, r2, r3
 8000f22:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f24:	e021      	b.n	8000f6a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f2c:	d01a      	beq.n	8000f64 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d007      	beq.n	8000f44 <HAL_ADC_PollForConversion+0x168>
 8000f34:	f7ff fd72 	bl	8000a1c <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	683a      	ldr	r2, [r7, #0]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d20f      	bcs.n	8000f64 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d90b      	bls.n	8000f64 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f50:	f043 0204 	orr.w	r2, r3, #4
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e030      	b.n	8000fc6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3301      	adds	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d8d9      	bhi.n	8000f26 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f06f 0212 	mvn.w	r2, #18
 8000f7a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f92:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f96:	d115      	bne.n	8000fc4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d111      	bne.n	8000fc4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d105      	bne.n	8000fc4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbc:	f043 0201 	orr.w	r2, r3, #1
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	371c      	adds	r7, #28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd90      	pop	{r4, r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	24924924 	.word	0x24924924
 8000fd8:	00924924 	.word	0x00924924
 8000fdc:	12492492 	.word	0x12492492
 8000fe0:	00492492 	.word	0x00492492
 8000fe4:	00249249 	.word	0x00249249

08000fe8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001018:	2b01      	cmp	r3, #1
 800101a:	d101      	bne.n	8001020 <HAL_ADC_ConfigChannel+0x20>
 800101c:	2302      	movs	r3, #2
 800101e:	e0dc      	b.n	80011da <HAL_ADC_ConfigChannel+0x1da>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2201      	movs	r2, #1
 8001024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b06      	cmp	r3, #6
 800102e:	d81c      	bhi.n	800106a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	3b05      	subs	r3, #5
 8001042:	221f      	movs	r2, #31
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	4019      	ands	r1, r3
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	6818      	ldr	r0, [r3, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	3b05      	subs	r3, #5
 800105c:	fa00 f203 	lsl.w	r2, r0, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	430a      	orrs	r2, r1
 8001066:	635a      	str	r2, [r3, #52]	; 0x34
 8001068:	e03c      	b.n	80010e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b0c      	cmp	r3, #12
 8001070:	d81c      	bhi.n	80010ac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	3b23      	subs	r3, #35	; 0x23
 8001084:	221f      	movs	r2, #31
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	4019      	ands	r1, r3
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	3b23      	subs	r3, #35	; 0x23
 800109e:	fa00 f203 	lsl.w	r2, r0, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	430a      	orrs	r2, r1
 80010a8:	631a      	str	r2, [r3, #48]	; 0x30
 80010aa:	e01b      	b.n	80010e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	3b41      	subs	r3, #65	; 0x41
 80010be:	221f      	movs	r2, #31
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	4019      	ands	r1, r3
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	3b41      	subs	r3, #65	; 0x41
 80010d8:	fa00 f203 	lsl.w	r2, r0, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b09      	cmp	r3, #9
 80010ea:	d91c      	bls.n	8001126 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68d9      	ldr	r1, [r3, #12]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4613      	mov	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	3b1e      	subs	r3, #30
 80010fe:	2207      	movs	r2, #7
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	4019      	ands	r1, r3
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	6898      	ldr	r0, [r3, #8]
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	3b1e      	subs	r3, #30
 8001118:	fa00 f203 	lsl.w	r2, r0, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	430a      	orrs	r2, r1
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	e019      	b.n	800115a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6919      	ldr	r1, [r3, #16]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	2207      	movs	r2, #7
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	4019      	ands	r1, r3
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	6898      	ldr	r0, [r3, #8]
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	fa00 f203 	lsl.w	r2, r0, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b10      	cmp	r3, #16
 8001160:	d003      	beq.n	800116a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001166:	2b11      	cmp	r3, #17
 8001168:	d132      	bne.n	80011d0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a1d      	ldr	r2, [pc, #116]	; (80011e4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d125      	bne.n	80011c0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d126      	bne.n	80011d0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001190:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b10      	cmp	r3, #16
 8001198:	d11a      	bne.n	80011d0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <HAL_ADC_ConfigChannel+0x1e8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a13      	ldr	r2, [pc, #76]	; (80011ec <HAL_ADC_ConfigChannel+0x1ec>)
 80011a0:	fba2 2303 	umull	r2, r3, r2, r3
 80011a4:	0c9a      	lsrs	r2, r3, #18
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011b0:	e002      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f9      	bne.n	80011b2 <HAL_ADC_ConfigChannel+0x1b2>
 80011be:	e007      	b.n	80011d0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c4:	f043 0220 	orr.w	r2, r3, #32
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	40012400 	.word	0x40012400
 80011e8:	20000000 	.word	0x20000000
 80011ec:	431bde83 	.word	0x431bde83

080011f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b01      	cmp	r3, #1
 800120c:	d040      	beq.n	8001290 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f042 0201 	orr.w	r2, r2, #1
 800121c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <ADC_Enable+0xac>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a1f      	ldr	r2, [pc, #124]	; (80012a0 <ADC_Enable+0xb0>)
 8001224:	fba2 2303 	umull	r2, r3, r2, r3
 8001228:	0c9b      	lsrs	r3, r3, #18
 800122a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800122c:	e002      	b.n	8001234 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	3b01      	subs	r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f9      	bne.n	800122e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800123a:	f7ff fbef 	bl	8000a1c <HAL_GetTick>
 800123e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001240:	e01f      	b.n	8001282 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001242:	f7ff fbeb 	bl	8000a1c <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d918      	bls.n	8001282 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b01      	cmp	r3, #1
 800125c:	d011      	beq.n	8001282 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001262:	f043 0210 	orr.w	r2, r3, #16
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126e:	f043 0201 	orr.w	r2, r3, #1
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e007      	b.n	8001292 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	2b01      	cmp	r3, #1
 800128e:	d1d8      	bne.n	8001242 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000000 	.word	0x20000000
 80012a0:	431bde83 	.word	0x431bde83

080012a4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d12e      	bne.n	800131c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 0201 	bic.w	r2, r2, #1
 80012cc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012ce:	f7ff fba5 	bl	8000a1c <HAL_GetTick>
 80012d2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012d4:	e01b      	b.n	800130e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012d6:	f7ff fba1 	bl	8000a1c <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d914      	bls.n	800130e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d10d      	bne.n	800130e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f6:	f043 0210 	orr.w	r2, r3, #16
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001302:	f043 0201 	orr.w	r2, r3, #1
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e007      	b.n	800131e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	2b01      	cmp	r3, #1
 800131a:	d0dc      	beq.n	80012d6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001344:	4013      	ands	r3, r2
 8001346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135a:	4a04      	ldr	r2, [pc, #16]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	60d3      	str	r3, [r2, #12]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <__NVIC_GetPriorityGrouping+0x18>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	f003 0307 	and.w	r3, r3, #7
}
 800137e:	4618      	mov	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	2b00      	cmp	r3, #0
 800139e:	db0a      	blt.n	80013b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	490c      	ldr	r1, [pc, #48]	; (80013d8 <__NVIC_SetPriority+0x4c>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	0112      	lsls	r2, r2, #4
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	440b      	add	r3, r1
 80013b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b4:	e00a      	b.n	80013cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4908      	ldr	r1, [pc, #32]	; (80013dc <__NVIC_SetPriority+0x50>)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	3b04      	subs	r3, #4
 80013c4:	0112      	lsls	r2, r2, #4
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	440b      	add	r3, r1
 80013ca:	761a      	strb	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000e100 	.word	0xe000e100
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b089      	sub	sp, #36	; 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f1c3 0307 	rsb	r3, r3, #7
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	bf28      	it	cs
 80013fe:	2304      	movcs	r3, #4
 8001400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3304      	adds	r3, #4
 8001406:	2b06      	cmp	r3, #6
 8001408:	d902      	bls.n	8001410 <NVIC_EncodePriority+0x30>
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3b03      	subs	r3, #3
 800140e:	e000      	b.n	8001412 <NVIC_EncodePriority+0x32>
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	f04f 32ff 	mov.w	r2, #4294967295
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	401a      	ands	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001428:	f04f 31ff 	mov.w	r1, #4294967295
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	43d9      	mvns	r1, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	4313      	orrs	r3, r2
         );
}
 800143a:	4618      	mov	r0, r3
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001454:	d301      	bcc.n	800145a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001456:	2301      	movs	r3, #1
 8001458:	e00f      	b.n	800147a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <SysTick_Config+0x40>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001462:	210f      	movs	r1, #15
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f7ff ff90 	bl	800138c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <SysTick_Config+0x40>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001472:	4b04      	ldr	r3, [pc, #16]	; (8001484 <SysTick_Config+0x40>)
 8001474:	2207      	movs	r2, #7
 8001476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	e000e010 	.word	0xe000e010

08001488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff49 	bl	8001328 <__NVIC_SetPriorityGrouping>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b0:	f7ff ff5e 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80014b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	68b9      	ldr	r1, [r7, #8]
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f7ff ff90 	bl	80013e0 <NVIC_EncodePriority>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff5f 	bl	800138c <__NVIC_SetPriority>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffb0 	bl	8001444 <SysTick_Config>
 80014e4:	4603      	mov	r3, r0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b08b      	sub	sp, #44	; 0x2c
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001502:	e148      	b.n	8001796 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001504:	2201      	movs	r2, #1
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	69fa      	ldr	r2, [r7, #28]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	429a      	cmp	r2, r3
 800151e:	f040 8137 	bne.w	8001790 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	4aa3      	ldr	r2, [pc, #652]	; (80017b4 <HAL_GPIO_Init+0x2c4>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d05e      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
 800152c:	4aa1      	ldr	r2, [pc, #644]	; (80017b4 <HAL_GPIO_Init+0x2c4>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d875      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 8001532:	4aa1      	ldr	r2, [pc, #644]	; (80017b8 <HAL_GPIO_Init+0x2c8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d058      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
 8001538:	4a9f      	ldr	r2, [pc, #636]	; (80017b8 <HAL_GPIO_Init+0x2c8>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d86f      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 800153e:	4a9f      	ldr	r2, [pc, #636]	; (80017bc <HAL_GPIO_Init+0x2cc>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d052      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
 8001544:	4a9d      	ldr	r2, [pc, #628]	; (80017bc <HAL_GPIO_Init+0x2cc>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d869      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 800154a:	4a9d      	ldr	r2, [pc, #628]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d04c      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
 8001550:	4a9b      	ldr	r2, [pc, #620]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d863      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 8001556:	4a9b      	ldr	r2, [pc, #620]	; (80017c4 <HAL_GPIO_Init+0x2d4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d046      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
 800155c:	4a99      	ldr	r2, [pc, #612]	; (80017c4 <HAL_GPIO_Init+0x2d4>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d85d      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 8001562:	2b12      	cmp	r3, #18
 8001564:	d82a      	bhi.n	80015bc <HAL_GPIO_Init+0xcc>
 8001566:	2b12      	cmp	r3, #18
 8001568:	d859      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 800156a:	a201      	add	r2, pc, #4	; (adr r2, 8001570 <HAL_GPIO_Init+0x80>)
 800156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001570:	080015eb 	.word	0x080015eb
 8001574:	080015c5 	.word	0x080015c5
 8001578:	080015d7 	.word	0x080015d7
 800157c:	08001619 	.word	0x08001619
 8001580:	0800161f 	.word	0x0800161f
 8001584:	0800161f 	.word	0x0800161f
 8001588:	0800161f 	.word	0x0800161f
 800158c:	0800161f 	.word	0x0800161f
 8001590:	0800161f 	.word	0x0800161f
 8001594:	0800161f 	.word	0x0800161f
 8001598:	0800161f 	.word	0x0800161f
 800159c:	0800161f 	.word	0x0800161f
 80015a0:	0800161f 	.word	0x0800161f
 80015a4:	0800161f 	.word	0x0800161f
 80015a8:	0800161f 	.word	0x0800161f
 80015ac:	0800161f 	.word	0x0800161f
 80015b0:	0800161f 	.word	0x0800161f
 80015b4:	080015cd 	.word	0x080015cd
 80015b8:	080015e1 	.word	0x080015e1
 80015bc:	4a82      	ldr	r2, [pc, #520]	; (80017c8 <HAL_GPIO_Init+0x2d8>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d013      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015c2:	e02c      	b.n	800161e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	623b      	str	r3, [r7, #32]
          break;
 80015ca:	e029      	b.n	8001620 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	3304      	adds	r3, #4
 80015d2:	623b      	str	r3, [r7, #32]
          break;
 80015d4:	e024      	b.n	8001620 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	3308      	adds	r3, #8
 80015dc:	623b      	str	r3, [r7, #32]
          break;
 80015de:	e01f      	b.n	8001620 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	330c      	adds	r3, #12
 80015e6:	623b      	str	r3, [r7, #32]
          break;
 80015e8:	e01a      	b.n	8001620 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d102      	bne.n	80015f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015f2:	2304      	movs	r3, #4
 80015f4:	623b      	str	r3, [r7, #32]
          break;
 80015f6:	e013      	b.n	8001620 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d105      	bne.n	800160c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001600:	2308      	movs	r3, #8
 8001602:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	611a      	str	r2, [r3, #16]
          break;
 800160a:	e009      	b.n	8001620 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800160c:	2308      	movs	r3, #8
 800160e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	615a      	str	r2, [r3, #20]
          break;
 8001616:	e003      	b.n	8001620 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
          break;
 800161c:	e000      	b.n	8001620 <HAL_GPIO_Init+0x130>
          break;
 800161e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	2bff      	cmp	r3, #255	; 0xff
 8001624:	d801      	bhi.n	800162a <HAL_GPIO_Init+0x13a>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	e001      	b.n	800162e <HAL_GPIO_Init+0x13e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3304      	adds	r3, #4
 800162e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	2bff      	cmp	r3, #255	; 0xff
 8001634:	d802      	bhi.n	800163c <HAL_GPIO_Init+0x14c>
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	e002      	b.n	8001642 <HAL_GPIO_Init+0x152>
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	3b08      	subs	r3, #8
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	210f      	movs	r1, #15
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	fa01 f303 	lsl.w	r3, r1, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	401a      	ands	r2, r3
 8001654:	6a39      	ldr	r1, [r7, #32]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	fa01 f303 	lsl.w	r3, r1, r3
 800165c:	431a      	orrs	r2, r3
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 8090 	beq.w	8001790 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001670:	4b56      	ldr	r3, [pc, #344]	; (80017cc <HAL_GPIO_Init+0x2dc>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a55      	ldr	r2, [pc, #340]	; (80017cc <HAL_GPIO_Init+0x2dc>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b53      	ldr	r3, [pc, #332]	; (80017cc <HAL_GPIO_Init+0x2dc>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001688:	4a51      	ldr	r2, [pc, #324]	; (80017d0 <HAL_GPIO_Init+0x2e0>)
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	3302      	adds	r3, #2
 8001690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001694:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	4013      	ands	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a49      	ldr	r2, [pc, #292]	; (80017d4 <HAL_GPIO_Init+0x2e4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d00d      	beq.n	80016d0 <HAL_GPIO_Init+0x1e0>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a48      	ldr	r2, [pc, #288]	; (80017d8 <HAL_GPIO_Init+0x2e8>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d007      	beq.n	80016cc <HAL_GPIO_Init+0x1dc>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a47      	ldr	r2, [pc, #284]	; (80017dc <HAL_GPIO_Init+0x2ec>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d101      	bne.n	80016c8 <HAL_GPIO_Init+0x1d8>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e004      	b.n	80016d2 <HAL_GPIO_Init+0x1e2>
 80016c8:	2303      	movs	r3, #3
 80016ca:	e002      	b.n	80016d2 <HAL_GPIO_Init+0x1e2>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <HAL_GPIO_Init+0x1e2>
 80016d0:	2300      	movs	r3, #0
 80016d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d4:	f002 0203 	and.w	r2, r2, #3
 80016d8:	0092      	lsls	r2, r2, #2
 80016da:	4093      	lsls	r3, r2
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	4313      	orrs	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016e2:	493b      	ldr	r1, [pc, #236]	; (80017d0 <HAL_GPIO_Init+0x2e0>)
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	089b      	lsrs	r3, r3, #2
 80016e8:	3302      	adds	r3, #2
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d006      	beq.n	800170a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016fc:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4937      	ldr	r1, [pc, #220]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	600b      	str	r3, [r1, #0]
 8001708:	e006      	b.n	8001718 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800170a:	4b35      	ldr	r3, [pc, #212]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	43db      	mvns	r3, r3
 8001712:	4933      	ldr	r1, [pc, #204]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 8001714:	4013      	ands	r3, r2
 8001716:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001724:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	492d      	ldr	r1, [pc, #180]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
 8001730:	e006      	b.n	8001740 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001732:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	43db      	mvns	r3, r3
 800173a:	4929      	ldr	r1, [pc, #164]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 800173c:	4013      	ands	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d006      	beq.n	800175a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800174c:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	4923      	ldr	r1, [pc, #140]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	608b      	str	r3, [r1, #8]
 8001758:	e006      	b.n	8001768 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800175a:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	43db      	mvns	r3, r3
 8001762:	491f      	ldr	r1, [pc, #124]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 8001764:	4013      	ands	r3, r2
 8001766:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d006      	beq.n	8001782 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	4919      	ldr	r1, [pc, #100]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	60cb      	str	r3, [r1, #12]
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	43db      	mvns	r3, r3
 800178a:	4915      	ldr	r1, [pc, #84]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 800178c:	4013      	ands	r3, r2
 800178e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	3301      	adds	r3, #1
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	fa22 f303 	lsr.w	r3, r2, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f47f aeaf 	bne.w	8001504 <HAL_GPIO_Init+0x14>
  }
}
 80017a6:	bf00      	nop
 80017a8:	bf00      	nop
 80017aa:	372c      	adds	r7, #44	; 0x2c
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	10320000 	.word	0x10320000
 80017b8:	10310000 	.word	0x10310000
 80017bc:	10220000 	.word	0x10220000
 80017c0:	10210000 	.word	0x10210000
 80017c4:	10120000 	.word	0x10120000
 80017c8:	10110000 	.word	0x10110000
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40010000 	.word	0x40010000
 80017d4:	40010800 	.word	0x40010800
 80017d8:	40010c00 	.word	0x40010c00
 80017dc:	40011000 	.word	0x40011000
 80017e0:	40010400 	.word	0x40010400

080017e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e12b      	b.n	8001a4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d106      	bne.n	8001810 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7fe ffd0 	bl	80007b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2224      	movs	r2, #36	; 0x24
 8001814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0201 	bic.w	r2, r2, #1
 8001826:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001836:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001846:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001848:	f000 ffea 	bl	8002820 <HAL_RCC_GetPCLK1Freq>
 800184c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4a81      	ldr	r2, [pc, #516]	; (8001a58 <HAL_I2C_Init+0x274>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d807      	bhi.n	8001868 <HAL_I2C_Init+0x84>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4a80      	ldr	r2, [pc, #512]	; (8001a5c <HAL_I2C_Init+0x278>)
 800185c:	4293      	cmp	r3, r2
 800185e:	bf94      	ite	ls
 8001860:	2301      	movls	r3, #1
 8001862:	2300      	movhi	r3, #0
 8001864:	b2db      	uxtb	r3, r3
 8001866:	e006      	b.n	8001876 <HAL_I2C_Init+0x92>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4a7d      	ldr	r2, [pc, #500]	; (8001a60 <HAL_I2C_Init+0x27c>)
 800186c:	4293      	cmp	r3, r2
 800186e:	bf94      	ite	ls
 8001870:	2301      	movls	r3, #1
 8001872:	2300      	movhi	r3, #0
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e0e7      	b.n	8001a4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4a78      	ldr	r2, [pc, #480]	; (8001a64 <HAL_I2C_Init+0x280>)
 8001882:	fba2 2303 	umull	r2, r3, r2, r3
 8001886:	0c9b      	lsrs	r3, r3, #18
 8001888:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	430a      	orrs	r2, r1
 800189c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	4a6a      	ldr	r2, [pc, #424]	; (8001a58 <HAL_I2C_Init+0x274>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d802      	bhi.n	80018b8 <HAL_I2C_Init+0xd4>
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	3301      	adds	r3, #1
 80018b6:	e009      	b.n	80018cc <HAL_I2C_Init+0xe8>
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018be:	fb02 f303 	mul.w	r3, r2, r3
 80018c2:	4a69      	ldr	r2, [pc, #420]	; (8001a68 <HAL_I2C_Init+0x284>)
 80018c4:	fba2 2303 	umull	r2, r3, r2, r3
 80018c8:	099b      	lsrs	r3, r3, #6
 80018ca:	3301      	adds	r3, #1
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	430b      	orrs	r3, r1
 80018d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	495c      	ldr	r1, [pc, #368]	; (8001a58 <HAL_I2C_Init+0x274>)
 80018e8:	428b      	cmp	r3, r1
 80018ea:	d819      	bhi.n	8001920 <HAL_I2C_Init+0x13c>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	1e59      	subs	r1, r3, #1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80018fa:	1c59      	adds	r1, r3, #1
 80018fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001900:	400b      	ands	r3, r1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00a      	beq.n	800191c <HAL_I2C_Init+0x138>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1e59      	subs	r1, r3, #1
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fbb1 f3f3 	udiv	r3, r1, r3
 8001914:	3301      	adds	r3, #1
 8001916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800191a:	e051      	b.n	80019c0 <HAL_I2C_Init+0x1dc>
 800191c:	2304      	movs	r3, #4
 800191e:	e04f      	b.n	80019c0 <HAL_I2C_Init+0x1dc>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d111      	bne.n	800194c <HAL_I2C_Init+0x168>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	1e58      	subs	r0, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6859      	ldr	r1, [r3, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	440b      	add	r3, r1
 8001936:	fbb0 f3f3 	udiv	r3, r0, r3
 800193a:	3301      	adds	r3, #1
 800193c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001940:	2b00      	cmp	r3, #0
 8001942:	bf0c      	ite	eq
 8001944:	2301      	moveq	r3, #1
 8001946:	2300      	movne	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	e012      	b.n	8001972 <HAL_I2C_Init+0x18e>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	1e58      	subs	r0, r3, #1
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6859      	ldr	r1, [r3, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	0099      	lsls	r1, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001962:	3301      	adds	r3, #1
 8001964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001968:	2b00      	cmp	r3, #0
 800196a:	bf0c      	ite	eq
 800196c:	2301      	moveq	r3, #1
 800196e:	2300      	movne	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_I2C_Init+0x196>
 8001976:	2301      	movs	r3, #1
 8001978:	e022      	b.n	80019c0 <HAL_I2C_Init+0x1dc>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10e      	bne.n	80019a0 <HAL_I2C_Init+0x1bc>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1e58      	subs	r0, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6859      	ldr	r1, [r3, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	440b      	add	r3, r1
 8001990:	fbb0 f3f3 	udiv	r3, r0, r3
 8001994:	3301      	adds	r3, #1
 8001996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800199a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800199e:	e00f      	b.n	80019c0 <HAL_I2C_Init+0x1dc>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	1e58      	subs	r0, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6859      	ldr	r1, [r3, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	0099      	lsls	r1, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b6:	3301      	adds	r3, #1
 80019b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	6809      	ldr	r1, [r1, #0]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69da      	ldr	r2, [r3, #28]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6911      	ldr	r1, [r2, #16]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	68d2      	ldr	r2, [r2, #12]
 80019fa:	4311      	orrs	r1, r2
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	430b      	orrs	r3, r1
 8001a02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0201 	orr.w	r2, r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2220      	movs	r2, #32
 8001a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	000186a0 	.word	0x000186a0
 8001a5c:	001e847f 	.word	0x001e847f
 8001a60:	003d08ff 	.word	0x003d08ff
 8001a64:	431bde83 	.word	0x431bde83
 8001a68:	10624dd3 	.word	0x10624dd3

08001a6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	607a      	str	r2, [r7, #4]
 8001a76:	461a      	mov	r2, r3
 8001a78:	460b      	mov	r3, r1
 8001a7a:	817b      	strh	r3, [r7, #10]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a80:	f7fe ffcc 	bl	8000a1c <HAL_GetTick>
 8001a84:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b20      	cmp	r3, #32
 8001a90:	f040 80e0 	bne.w	8001c54 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	2319      	movs	r3, #25
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	4970      	ldr	r1, [pc, #448]	; (8001c60 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 f964 	bl	8001d6c <I2C_WaitOnFlagUntilTimeout>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e0d3      	b.n	8001c56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_I2C_Master_Transmit+0x50>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e0cc      	b.n	8001c56 <HAL_I2C_Master_Transmit+0x1ea>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d007      	beq.n	8001ae2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0201 	orr.w	r2, r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2221      	movs	r2, #33	; 0x21
 8001af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2210      	movs	r2, #16
 8001afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	893a      	ldrh	r2, [r7, #8]
 8001b12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4a50      	ldr	r2, [pc, #320]	; (8001c64 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b24:	8979      	ldrh	r1, [r7, #10]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	6a3a      	ldr	r2, [r7, #32]
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 f89c 	bl	8001c68 <I2C_MasterRequestWrite>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e08d      	b.n	8001c56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b50:	e066      	b.n	8001c20 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	6a39      	ldr	r1, [r7, #32]
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 f9de 	bl	8001f18 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00d      	beq.n	8001b7e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d107      	bne.n	8001b7a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e06b      	b.n	8001c56 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	781a      	ldrb	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d11b      	bne.n	8001bf4 <HAL_I2C_Master_Transmit+0x188>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d017      	beq.n	8001bf4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	6a39      	ldr	r1, [r7, #32]
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f000 f9ce 	bl	8001f9a <I2C_WaitOnBTFFlagUntilTimeout>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00d      	beq.n	8001c20 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d107      	bne.n	8001c1c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c1a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e01a      	b.n	8001c56 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d194      	bne.n	8001b52 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	e000      	b.n	8001c56 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c54:	2302      	movs	r3, #2
  }
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	00100002 	.word	0x00100002
 8001c64:	ffff0000 	.word	0xffff0000

08001c68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	607a      	str	r2, [r7, #4]
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	460b      	mov	r3, r1
 8001c76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d006      	beq.n	8001c92 <I2C_MasterRequestWrite+0x2a>
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d003      	beq.n	8001c92 <I2C_MasterRequestWrite+0x2a>
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c90:	d108      	bne.n	8001ca4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	e00b      	b.n	8001cbc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	2b12      	cmp	r3, #18
 8001caa:	d107      	bne.n	8001cbc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 f84f 	bl	8001d6c <I2C_WaitOnFlagUntilTimeout>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00d      	beq.n	8001cf0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ce2:	d103      	bne.n	8001cec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e035      	b.n	8001d5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cf8:	d108      	bne.n	8001d0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cfa:	897b      	ldrh	r3, [r7, #10]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d08:	611a      	str	r2, [r3, #16]
 8001d0a:	e01b      	b.n	8001d44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d0c:	897b      	ldrh	r3, [r7, #10]
 8001d0e:	11db      	asrs	r3, r3, #7
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	f003 0306 	and.w	r3, r3, #6
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	f063 030f 	orn	r3, r3, #15
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	490e      	ldr	r1, [pc, #56]	; (8001d64 <I2C_MasterRequestWrite+0xfc>)
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f875 	bl	8001e1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e010      	b.n	8001d5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d3a:	897b      	ldrh	r3, [r7, #10]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	4907      	ldr	r1, [pc, #28]	; (8001d68 <I2C_MasterRequestWrite+0x100>)
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 f865 	bl	8001e1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	00010008 	.word	0x00010008
 8001d68:	00010002 	.word	0x00010002

08001d6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d7c:	e025      	b.n	8001dca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d84:	d021      	beq.n	8001dca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d86:	f7fe fe49 	bl	8000a1c <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d302      	bcc.n	8001d9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d116      	bne.n	8001dca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2220      	movs	r2, #32
 8001da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f043 0220 	orr.w	r2, r3, #32
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e023      	b.n	8001e12 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	0c1b      	lsrs	r3, r3, #16
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d10d      	bne.n	8001df0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	4013      	ands	r3, r2
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	bf0c      	ite	eq
 8001de6:	2301      	moveq	r3, #1
 8001de8:	2300      	movne	r3, #0
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	461a      	mov	r2, r3
 8001dee:	e00c      	b.n	8001e0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	bf0c      	ite	eq
 8001e02:	2301      	moveq	r3, #1
 8001e04:	2300      	movne	r3, #0
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d0b6      	beq.n	8001d7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e28:	e051      	b.n	8001ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e38:	d123      	bne.n	8001e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e48:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e52:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f043 0204 	orr.w	r2, r3, #4
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e046      	b.n	8001f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e88:	d021      	beq.n	8001ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e8a:	f7fe fdc7 	bl	8000a1c <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d302      	bcc.n	8001ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d116      	bne.n	8001ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f043 0220 	orr.w	r2, r3, #32
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e020      	b.n	8001f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	0c1b      	lsrs	r3, r3, #16
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d10c      	bne.n	8001ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	bf14      	ite	ne
 8001eea:	2301      	movne	r3, #1
 8001eec:	2300      	moveq	r3, #0
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	e00b      	b.n	8001f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	43da      	mvns	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	4013      	ands	r3, r2
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf14      	ite	ne
 8001f04:	2301      	movne	r3, #1
 8001f06:	2300      	moveq	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d18d      	bne.n	8001e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f24:	e02d      	b.n	8001f82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f878 	bl	800201c <I2C_IsAcknowledgeFailed>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e02d      	b.n	8001f92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3c:	d021      	beq.n	8001f82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f3e:	f7fe fd6d 	bl	8000a1c <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d302      	bcc.n	8001f54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d116      	bne.n	8001f82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f043 0220 	orr.w	r2, r3, #32
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e007      	b.n	8001f92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8c:	2b80      	cmp	r3, #128	; 0x80
 8001f8e:	d1ca      	bne.n	8001f26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fa6:	e02d      	b.n	8002004 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 f837 	bl	800201c <I2C_IsAcknowledgeFailed>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e02d      	b.n	8002014 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbe:	d021      	beq.n	8002004 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc0:	f7fe fd2c 	bl	8000a1c <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d302      	bcc.n	8001fd6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d116      	bne.n	8002004 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	f043 0220 	orr.w	r2, r3, #32
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e007      	b.n	8002014 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	2b04      	cmp	r3, #4
 8002010:	d1ca      	bne.n	8001fa8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002032:	d11b      	bne.n	800206c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800203c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2220      	movs	r2, #32
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	f043 0204 	orr.w	r2, r3, #4
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr

08002078 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e26c      	b.n	8002564 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 8087 	beq.w	80021a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002098:	4b92      	ldr	r3, [pc, #584]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d00c      	beq.n	80020be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020a4:	4b8f      	ldr	r3, [pc, #572]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 030c 	and.w	r3, r3, #12
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d112      	bne.n	80020d6 <HAL_RCC_OscConfig+0x5e>
 80020b0:	4b8c      	ldr	r3, [pc, #560]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020bc:	d10b      	bne.n	80020d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020be:	4b89      	ldr	r3, [pc, #548]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d06c      	beq.n	80021a4 <HAL_RCC_OscConfig+0x12c>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d168      	bne.n	80021a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e246      	b.n	8002564 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020de:	d106      	bne.n	80020ee <HAL_RCC_OscConfig+0x76>
 80020e0:	4b80      	ldr	r3, [pc, #512]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a7f      	ldr	r2, [pc, #508]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	e02e      	b.n	800214c <HAL_RCC_OscConfig+0xd4>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0x98>
 80020f6:	4b7b      	ldr	r3, [pc, #492]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a7a      	ldr	r2, [pc, #488]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	4b78      	ldr	r3, [pc, #480]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a77      	ldr	r2, [pc, #476]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 8002108:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	e01d      	b.n	800214c <HAL_RCC_OscConfig+0xd4>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002118:	d10c      	bne.n	8002134 <HAL_RCC_OscConfig+0xbc>
 800211a:	4b72      	ldr	r3, [pc, #456]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a71      	ldr	r2, [pc, #452]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 8002120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	4b6f      	ldr	r3, [pc, #444]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a6e      	ldr	r2, [pc, #440]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 800212c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	e00b      	b.n	800214c <HAL_RCC_OscConfig+0xd4>
 8002134:	4b6b      	ldr	r3, [pc, #428]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a6a      	ldr	r2, [pc, #424]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 800213a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	4b68      	ldr	r3, [pc, #416]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a67      	ldr	r2, [pc, #412]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 8002146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d013      	beq.n	800217c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7fe fc62 	bl	8000a1c <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800215c:	f7fe fc5e 	bl	8000a1c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b64      	cmp	r3, #100	; 0x64
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e1fa      	b.n	8002564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216e:	4b5d      	ldr	r3, [pc, #372]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0xe4>
 800217a:	e014      	b.n	80021a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7fe fc4e 	bl	8000a1c <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002184:	f7fe fc4a 	bl	8000a1c <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	; 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e1e6      	b.n	8002564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002196:	4b53      	ldr	r3, [pc, #332]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x10c>
 80021a2:	e000      	b.n	80021a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d063      	beq.n	800227a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021b2:	4b4c      	ldr	r3, [pc, #304]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00b      	beq.n	80021d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021be:	4b49      	ldr	r3, [pc, #292]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d11c      	bne.n	8002204 <HAL_RCC_OscConfig+0x18c>
 80021ca:	4b46      	ldr	r3, [pc, #280]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d116      	bne.n	8002204 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d6:	4b43      	ldr	r3, [pc, #268]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d005      	beq.n	80021ee <HAL_RCC_OscConfig+0x176>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d001      	beq.n	80021ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e1ba      	b.n	8002564 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ee:	4b3d      	ldr	r3, [pc, #244]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4939      	ldr	r1, [pc, #228]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002202:	e03a      	b.n	800227a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d020      	beq.n	800224e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800220c:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 800220e:	2201      	movs	r2, #1
 8002210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002212:	f7fe fc03 	bl	8000a1c <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800221a:	f7fe fbff 	bl	8000a1c <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e19b      	b.n	8002564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222c:	4b2d      	ldr	r3, [pc, #180]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002238:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4927      	ldr	r1, [pc, #156]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 8002248:	4313      	orrs	r3, r2
 800224a:	600b      	str	r3, [r1, #0]
 800224c:	e015      	b.n	800227a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800224e:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7fe fbe2 	bl	8000a1c <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800225c:	f7fe fbde 	bl	8000a1c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e17a      	b.n	8002564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226e:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d03a      	beq.n	80022fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d019      	beq.n	80022c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800228e:	4b17      	ldr	r3, [pc, #92]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 8002290:	2201      	movs	r2, #1
 8002292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002294:	f7fe fbc2 	bl	8000a1c <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229c:	f7fe fbbe 	bl	8000a1c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e15a      	b.n	8002564 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ae:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022ba:	2001      	movs	r0, #1
 80022bc:	f000 fad8 	bl	8002870 <RCC_Delay>
 80022c0:	e01c      	b.n	80022fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c8:	f7fe fba8 	bl	8000a1c <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ce:	e00f      	b.n	80022f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d0:	f7fe fba4 	bl	8000a1c <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d908      	bls.n	80022f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e140      	b.n	8002564 <HAL_RCC_OscConfig+0x4ec>
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000
 80022e8:	42420000 	.word	0x42420000
 80022ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f0:	4b9e      	ldr	r3, [pc, #632]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1e9      	bne.n	80022d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80a6 	beq.w	8002456 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230e:	4b97      	ldr	r3, [pc, #604]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10d      	bne.n	8002336 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800231a:	4b94      	ldr	r3, [pc, #592]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	4a93      	ldr	r2, [pc, #588]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 8002320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002324:	61d3      	str	r3, [r2, #28]
 8002326:	4b91      	ldr	r3, [pc, #580]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002332:	2301      	movs	r3, #1
 8002334:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002336:	4b8e      	ldr	r3, [pc, #568]	; (8002570 <HAL_RCC_OscConfig+0x4f8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233e:	2b00      	cmp	r3, #0
 8002340:	d118      	bne.n	8002374 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002342:	4b8b      	ldr	r3, [pc, #556]	; (8002570 <HAL_RCC_OscConfig+0x4f8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a8a      	ldr	r2, [pc, #552]	; (8002570 <HAL_RCC_OscConfig+0x4f8>)
 8002348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800234e:	f7fe fb65 	bl	8000a1c <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002356:	f7fe fb61 	bl	8000a1c <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b64      	cmp	r3, #100	; 0x64
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e0fd      	b.n	8002564 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002368:	4b81      	ldr	r3, [pc, #516]	; (8002570 <HAL_RCC_OscConfig+0x4f8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d106      	bne.n	800238a <HAL_RCC_OscConfig+0x312>
 800237c:	4b7b      	ldr	r3, [pc, #492]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	4a7a      	ldr	r2, [pc, #488]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6213      	str	r3, [r2, #32]
 8002388:	e02d      	b.n	80023e6 <HAL_RCC_OscConfig+0x36e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10c      	bne.n	80023ac <HAL_RCC_OscConfig+0x334>
 8002392:	4b76      	ldr	r3, [pc, #472]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4a75      	ldr	r2, [pc, #468]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 8002398:	f023 0301 	bic.w	r3, r3, #1
 800239c:	6213      	str	r3, [r2, #32]
 800239e:	4b73      	ldr	r3, [pc, #460]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	4a72      	ldr	r2, [pc, #456]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	f023 0304 	bic.w	r3, r3, #4
 80023a8:	6213      	str	r3, [r2, #32]
 80023aa:	e01c      	b.n	80023e6 <HAL_RCC_OscConfig+0x36e>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	2b05      	cmp	r3, #5
 80023b2:	d10c      	bne.n	80023ce <HAL_RCC_OscConfig+0x356>
 80023b4:	4b6d      	ldr	r3, [pc, #436]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4a6c      	ldr	r2, [pc, #432]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 80023ba:	f043 0304 	orr.w	r3, r3, #4
 80023be:	6213      	str	r3, [r2, #32]
 80023c0:	4b6a      	ldr	r3, [pc, #424]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	4a69      	ldr	r2, [pc, #420]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6213      	str	r3, [r2, #32]
 80023cc:	e00b      	b.n	80023e6 <HAL_RCC_OscConfig+0x36e>
 80023ce:	4b67      	ldr	r3, [pc, #412]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	4a66      	ldr	r2, [pc, #408]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	6213      	str	r3, [r2, #32]
 80023da:	4b64      	ldr	r3, [pc, #400]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	4a63      	ldr	r2, [pc, #396]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	f023 0304 	bic.w	r3, r3, #4
 80023e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d015      	beq.n	800241a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ee:	f7fe fb15 	bl	8000a1c <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f4:	e00a      	b.n	800240c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f6:	f7fe fb11 	bl	8000a1c <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	f241 3288 	movw	r2, #5000	; 0x1388
 8002404:	4293      	cmp	r3, r2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e0ab      	b.n	8002564 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240c:	4b57      	ldr	r3, [pc, #348]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0ee      	beq.n	80023f6 <HAL_RCC_OscConfig+0x37e>
 8002418:	e014      	b.n	8002444 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241a:	f7fe faff 	bl	8000a1c <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002420:	e00a      	b.n	8002438 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002422:	f7fe fafb 	bl	8000a1c <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002430:	4293      	cmp	r3, r2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e095      	b.n	8002564 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002438:	4b4c      	ldr	r3, [pc, #304]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1ee      	bne.n	8002422 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002444:	7dfb      	ldrb	r3, [r7, #23]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d105      	bne.n	8002456 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244a:	4b48      	ldr	r3, [pc, #288]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	4a47      	ldr	r2, [pc, #284]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 8002450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002454:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 8081 	beq.w	8002562 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002460:	4b42      	ldr	r3, [pc, #264]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 030c 	and.w	r3, r3, #12
 8002468:	2b08      	cmp	r3, #8
 800246a:	d061      	beq.n	8002530 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	2b02      	cmp	r3, #2
 8002472:	d146      	bne.n	8002502 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002474:	4b3f      	ldr	r3, [pc, #252]	; (8002574 <HAL_RCC_OscConfig+0x4fc>)
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247a:	f7fe facf 	bl	8000a1c <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002482:	f7fe facb 	bl	8000a1c <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e067      	b.n	8002564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002494:	4b35      	ldr	r3, [pc, #212]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f0      	bne.n	8002482 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a8:	d108      	bne.n	80024bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024aa:	4b30      	ldr	r3, [pc, #192]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	492d      	ldr	r1, [pc, #180]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024bc:	4b2b      	ldr	r3, [pc, #172]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a19      	ldr	r1, [r3, #32]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	430b      	orrs	r3, r1
 80024ce:	4927      	ldr	r1, [pc, #156]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d4:	4b27      	ldr	r3, [pc, #156]	; (8002574 <HAL_RCC_OscConfig+0x4fc>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024da:	f7fe fa9f 	bl	8000a1c <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e2:	f7fe fa9b 	bl	8000a1c <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e037      	b.n	8002564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f4:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x46a>
 8002500:	e02f      	b.n	8002562 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002502:	4b1c      	ldr	r3, [pc, #112]	; (8002574 <HAL_RCC_OscConfig+0x4fc>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7fe fa88 	bl	8000a1c <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002510:	f7fe fa84 	bl	8000a1c <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e020      	b.n	8002564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002522:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x498>
 800252e:	e018      	b.n	8002562 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e013      	b.n	8002564 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <HAL_RCC_OscConfig+0x4f4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	429a      	cmp	r2, r3
 800254e:	d106      	bne.n	800255e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255a:	429a      	cmp	r2, r3
 800255c:	d001      	beq.n	8002562 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000
 8002570:	40007000 	.word	0x40007000
 8002574:	42420060 	.word	0x42420060

08002578 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0d0      	b.n	800272e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800258c:	4b6a      	ldr	r3, [pc, #424]	; (8002738 <HAL_RCC_ClockConfig+0x1c0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d910      	bls.n	80025bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b67      	ldr	r3, [pc, #412]	; (8002738 <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 0207 	bic.w	r2, r3, #7
 80025a2:	4965      	ldr	r1, [pc, #404]	; (8002738 <HAL_RCC_ClockConfig+0x1c0>)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b63      	ldr	r3, [pc, #396]	; (8002738 <HAL_RCC_ClockConfig+0x1c0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0b8      	b.n	800272e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d020      	beq.n	800260a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025d4:	4b59      	ldr	r3, [pc, #356]	; (800273c <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4a58      	ldr	r2, [pc, #352]	; (800273c <HAL_RCC_ClockConfig+0x1c4>)
 80025da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025ec:	4b53      	ldr	r3, [pc, #332]	; (800273c <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	4a52      	ldr	r2, [pc, #328]	; (800273c <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f8:	4b50      	ldr	r3, [pc, #320]	; (800273c <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	494d      	ldr	r1, [pc, #308]	; (800273c <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	4313      	orrs	r3, r2
 8002608:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d040      	beq.n	8002698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d107      	bne.n	800262e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261e:	4b47      	ldr	r3, [pc, #284]	; (800273c <HAL_RCC_ClockConfig+0x1c4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d115      	bne.n	8002656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e07f      	b.n	800272e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d107      	bne.n	8002646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002636:	4b41      	ldr	r3, [pc, #260]	; (800273c <HAL_RCC_ClockConfig+0x1c4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d109      	bne.n	8002656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e073      	b.n	800272e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002646:	4b3d      	ldr	r3, [pc, #244]	; (800273c <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e06b      	b.n	800272e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002656:	4b39      	ldr	r3, [pc, #228]	; (800273c <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f023 0203 	bic.w	r2, r3, #3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	4936      	ldr	r1, [pc, #216]	; (800273c <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002668:	f7fe f9d8 	bl	8000a1c <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	e00a      	b.n	8002686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002670:	f7fe f9d4 	bl	8000a1c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e053      	b.n	800272e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002686:	4b2d      	ldr	r3, [pc, #180]	; (800273c <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 020c 	and.w	r2, r3, #12
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	429a      	cmp	r2, r3
 8002696:	d1eb      	bne.n	8002670 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002698:	4b27      	ldr	r3, [pc, #156]	; (8002738 <HAL_RCC_ClockConfig+0x1c0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d210      	bcs.n	80026c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a6:	4b24      	ldr	r3, [pc, #144]	; (8002738 <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 0207 	bic.w	r2, r3, #7
 80026ae:	4922      	ldr	r1, [pc, #136]	; (8002738 <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <HAL_RCC_ClockConfig+0x1c0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e032      	b.n	800272e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d008      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4916      	ldr	r1, [pc, #88]	; (800273c <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d009      	beq.n	8002706 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026f2:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	490e      	ldr	r1, [pc, #56]	; (800273c <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	4313      	orrs	r3, r2
 8002704:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002706:	f000 f821 	bl	800274c <HAL_RCC_GetSysClockFreq>
 800270a:	4602      	mov	r2, r0
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	490a      	ldr	r1, [pc, #40]	; (8002740 <HAL_RCC_ClockConfig+0x1c8>)
 8002718:	5ccb      	ldrb	r3, [r1, r3]
 800271a:	fa22 f303 	lsr.w	r3, r2, r3
 800271e:	4a09      	ldr	r2, [pc, #36]	; (8002744 <HAL_RCC_ClockConfig+0x1cc>)
 8002720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <HAL_RCC_ClockConfig+0x1d0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe f936 	bl	8000998 <HAL_InitTick>

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40022000 	.word	0x40022000
 800273c:	40021000 	.word	0x40021000
 8002740:	08003104 	.word	0x08003104
 8002744:	20000000 	.word	0x20000000
 8002748:	20000004 	.word	0x20000004

0800274c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800274c:	b490      	push	{r4, r7}
 800274e:	b08a      	sub	sp, #40	; 0x28
 8002750:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002752:	4b2a      	ldr	r3, [pc, #168]	; (80027fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002754:	1d3c      	adds	r4, r7, #4
 8002756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002758:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800275c:	f240 2301 	movw	r3, #513	; 0x201
 8002760:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
 800276a:	2300      	movs	r3, #0
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002776:	4b22      	ldr	r3, [pc, #136]	; (8002800 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b04      	cmp	r3, #4
 8002784:	d002      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x40>
 8002786:	2b08      	cmp	r3, #8
 8002788:	d003      	beq.n	8002792 <HAL_RCC_GetSysClockFreq+0x46>
 800278a:	e02d      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800278c:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_RCC_GetSysClockFreq+0xb8>)
 800278e:	623b      	str	r3, [r7, #32]
      break;
 8002790:	e02d      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	0c9b      	lsrs	r3, r3, #18
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800279e:	4413      	add	r3, r2
 80027a0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027a4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d013      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027b0:	4b13      	ldr	r3, [pc, #76]	; (8002800 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	0c5b      	lsrs	r3, r3, #17
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027be:	4413      	add	r3, r2
 80027c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	4a0e      	ldr	r2, [pc, #56]	; (8002804 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ca:	fb02 f203 	mul.w	r2, r2, r3
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
 80027d6:	e004      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	4a0b      	ldr	r2, [pc, #44]	; (8002808 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027dc:	fb02 f303 	mul.w	r3, r2, r3
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	623b      	str	r3, [r7, #32]
      break;
 80027e6:	e002      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ea:	623b      	str	r3, [r7, #32]
      break;
 80027ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ee:	6a3b      	ldr	r3, [r7, #32]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3728      	adds	r7, #40	; 0x28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc90      	pop	{r4, r7}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	080030e4 	.word	0x080030e4
 8002800:	40021000 	.word	0x40021000
 8002804:	007a1200 	.word	0x007a1200
 8002808:	003d0900 	.word	0x003d0900

0800280c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002810:	4b02      	ldr	r3, [pc, #8]	; (800281c <HAL_RCC_GetHCLKFreq+0x10>)
 8002812:	681b      	ldr	r3, [r3, #0]
}
 8002814:	4618      	mov	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	20000000 	.word	0x20000000

08002820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002824:	f7ff fff2 	bl	800280c <HAL_RCC_GetHCLKFreq>
 8002828:	4602      	mov	r2, r0
 800282a:	4b05      	ldr	r3, [pc, #20]	; (8002840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	0a1b      	lsrs	r3, r3, #8
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	4903      	ldr	r1, [pc, #12]	; (8002844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002836:	5ccb      	ldrb	r3, [r1, r3]
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800283c:	4618      	mov	r0, r3
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000
 8002844:	08003114 	.word	0x08003114

08002848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800284c:	f7ff ffde 	bl	800280c <HAL_RCC_GetHCLKFreq>
 8002850:	4602      	mov	r2, r0
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	0adb      	lsrs	r3, r3, #11
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	4903      	ldr	r1, [pc, #12]	; (800286c <HAL_RCC_GetPCLK2Freq+0x24>)
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40021000 	.word	0x40021000
 800286c:	08003114 	.word	0x08003114

08002870 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002878:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <RCC_Delay+0x34>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <RCC_Delay+0x38>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	0a5b      	lsrs	r3, r3, #9
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	fb02 f303 	mul.w	r3, r2, r3
 800288a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800288c:	bf00      	nop
  }
  while (Delay --);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1e5a      	subs	r2, r3, #1
 8002892:	60fa      	str	r2, [r7, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f9      	bne.n	800288c <RCC_Delay+0x1c>
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr
 80028a4:	20000000 	.word	0x20000000
 80028a8:	10624dd3 	.word	0x10624dd3

080028ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	2300      	movs	r3, #0
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d07d      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80028c8:	2300      	movs	r3, #0
 80028ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028cc:	4b4f      	ldr	r3, [pc, #316]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10d      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d8:	4b4c      	ldr	r3, [pc, #304]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	4a4b      	ldr	r2, [pc, #300]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e2:	61d3      	str	r3, [r2, #28]
 80028e4:	4b49      	ldr	r3, [pc, #292]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f0:	2301      	movs	r3, #1
 80028f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	4b46      	ldr	r3, [pc, #280]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d118      	bne.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002900:	4b43      	ldr	r3, [pc, #268]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a42      	ldr	r2, [pc, #264]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800290c:	f7fe f886 	bl	8000a1c <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002912:	e008      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002914:	f7fe f882 	bl	8000a1c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	; 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e06d      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002926:	4b3a      	ldr	r3, [pc, #232]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002932:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800293a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d02e      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	429a      	cmp	r2, r3
 800294e:	d027      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002950:	4b2e      	ldr	r3, [pc, #184]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002958:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800295a:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800295c:	2201      	movs	r2, #1
 800295e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002960:	4b2c      	ldr	r3, [pc, #176]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002966:	4a29      	ldr	r2, [pc, #164]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d014      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002976:	f7fe f851 	bl	8000a1c <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297c:	e00a      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297e:	f7fe f84d 	bl	8000a1c <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	f241 3288 	movw	r2, #5000	; 0x1388
 800298c:	4293      	cmp	r3, r2
 800298e:	d901      	bls.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e036      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002994:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0ee      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029a0:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	4917      	ldr	r1, [pc, #92]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d105      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	4a13      	ldr	r2, [pc, #76]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029d0:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	490b      	ldr	r1, [pc, #44]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d008      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029ee:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	4904      	ldr	r1, [pc, #16]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40007000 	.word	0x40007000
 8002a14:	42420440 	.word	0x42420440

08002a18 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002a18:	b590      	push	{r4, r7, lr}
 8002a1a:	b08d      	sub	sp, #52	; 0x34
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a20:	4b5a      	ldr	r3, [pc, #360]	; (8002b8c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002a22:	f107 040c 	add.w	r4, r7, #12
 8002a26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a2c:	f240 2301 	movw	r3, #513	; 0x201
 8002a30:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
 8002a36:	2300      	movs	r3, #0
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
 8002a42:	2300      	movs	r3, #0
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b10      	cmp	r3, #16
 8002a4a:	d00a      	beq.n	8002a62 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b10      	cmp	r3, #16
 8002a50:	f200 8091 	bhi.w	8002b76 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d04c      	beq.n	8002af4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d07c      	beq.n	8002b5a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002a60:	e089      	b.n	8002b76 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8002a62:	4b4b      	ldr	r3, [pc, #300]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002a68:	4b49      	ldr	r3, [pc, #292]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 8082 	beq.w	8002b7a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	0c9b      	lsrs	r3, r3, #18
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002a82:	4413      	add	r3, r2
 8002a84:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a88:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d018      	beq.n	8002ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a94:	4b3e      	ldr	r3, [pc, #248]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	0c5b      	lsrs	r3, r3, #17
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00d      	beq.n	8002ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002ab4:	4a37      	ldr	r2, [pc, #220]	; (8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac4:	e004      	b.n	8002ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	4a33      	ldr	r2, [pc, #204]	; (8002b98 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8002aca:	fb02 f303 	mul.w	r3, r2, r3
 8002ace:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002ad0:	4b2f      	ldr	r3, [pc, #188]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002adc:	d102      	bne.n	8002ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8002ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ae2:	e04a      	b.n	8002b7a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8002ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4a2c      	ldr	r2, [pc, #176]	; (8002b9c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	085b      	lsrs	r3, r3, #1
 8002af0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002af2:	e042      	b.n	8002b7a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8002af4:	4b26      	ldr	r3, [pc, #152]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b04:	d108      	bne.n	8002b18 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8002b10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b16:	e01f      	b.n	8002b58 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b22:	d109      	bne.n	8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002b24:	4b1a      	ldr	r3, [pc, #104]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8002b30:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b36:	e00f      	b.n	8002b58 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b42:	d11c      	bne.n	8002b7e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002b44:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d016      	beq.n	8002b7e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8002b50:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002b54:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b56:	e012      	b.n	8002b7e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002b58:	e011      	b.n	8002b7e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002b5a:	f7ff fe75 	bl	8002848 <HAL_RCC_GetPCLK2Freq>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	0b9b      	lsrs	r3, r3, #14
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b72:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b74:	e004      	b.n	8002b80 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002b76:	bf00      	nop
 8002b78:	e002      	b.n	8002b80 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002b7a:	bf00      	nop
 8002b7c:	e000      	b.n	8002b80 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002b7e:	bf00      	nop
    }
  }
  return (frequency);
 8002b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3734      	adds	r7, #52	; 0x34
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd90      	pop	{r4, r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	080030f4 	.word	0x080030f4
 8002b90:	40021000 	.word	0x40021000
 8002b94:	007a1200 	.word	0x007a1200
 8002b98:	003d0900 	.word	0x003d0900
 8002b9c:	aaaaaaab 	.word	0xaaaaaaab

08002ba0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e03f      	b.n	8002c32 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fd fe30 	bl	800082c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2224      	movs	r2, #36	; 0x24
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002be2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f9a7 	bl	8002f38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b08a      	sub	sp, #40	; 0x28
 8002c3e:	af02      	add	r7, sp, #8
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	4613      	mov	r3, r2
 8002c48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	d17c      	bne.n	8002d54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_UART_Transmit+0x2c>
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e075      	b.n	8002d56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_UART_Transmit+0x3e>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e06e      	b.n	8002d56 <HAL_UART_Transmit+0x11c>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2221      	movs	r2, #33	; 0x21
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c8e:	f7fd fec5 	bl	8000a1c <HAL_GetTick>
 8002c92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	88fa      	ldrh	r2, [r7, #6]
 8002c98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	88fa      	ldrh	r2, [r7, #6]
 8002c9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca8:	d108      	bne.n	8002cbc <HAL_UART_Transmit+0x82>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d104      	bne.n	8002cbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	e003      	b.n	8002cc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ccc:	e02a      	b.n	8002d24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2180      	movs	r1, #128	; 0x80
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f8e2 	bl	8002ea2 <UART_WaitOnFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e036      	b.n	8002d56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10b      	bne.n	8002d06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	3302      	adds	r3, #2
 8002d02:	61bb      	str	r3, [r7, #24]
 8002d04:	e007      	b.n	8002d16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	781a      	ldrb	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	3301      	adds	r3, #1
 8002d14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1cf      	bne.n	8002cce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2200      	movs	r2, #0
 8002d36:	2140      	movs	r1, #64	; 0x40
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 f8b2 	bl	8002ea2 <UART_WaitOnFlagUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e006      	b.n	8002d56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	e000      	b.n	8002d56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d54:	2302      	movs	r3, #2
  }
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3720      	adds	r7, #32
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b08a      	sub	sp, #40	; 0x28
 8002d62:	af02      	add	r7, sp, #8
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	f040 808c 	bne.w	8002e98 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <HAL_UART_Receive+0x2e>
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e084      	b.n	8002e9a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_UART_Receive+0x40>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e07d      	b.n	8002e9a <HAL_UART_Receive+0x13c>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2222      	movs	r2, #34	; 0x22
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dba:	f7fd fe2f 	bl	8000a1c <HAL_GetTick>
 8002dbe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	88fa      	ldrh	r2, [r7, #6]
 8002dc4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	88fa      	ldrh	r2, [r7, #6]
 8002dca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd4:	d108      	bne.n	8002de8 <HAL_UART_Receive+0x8a>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d104      	bne.n	8002de8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	61bb      	str	r3, [r7, #24]
 8002de6:	e003      	b.n	8002df0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002df8:	e043      	b.n	8002e82 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2200      	movs	r2, #0
 8002e02:	2120      	movs	r1, #32
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f84c 	bl	8002ea2 <UART_WaitOnFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e042      	b.n	8002e9a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10c      	bne.n	8002e34 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	3302      	adds	r3, #2
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	e01f      	b.n	8002e74 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3c:	d007      	beq.n	8002e4e <HAL_UART_Receive+0xf0>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10a      	bne.n	8002e5c <HAL_UART_Receive+0xfe>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	701a      	strb	r2, [r3, #0]
 8002e5a:	e008      	b.n	8002e6e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3301      	adds	r3, #1
 8002e72:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1b6      	bne.n	8002dfa <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	e000      	b.n	8002e9a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002e98:	2302      	movs	r3, #2
  }
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3720      	adds	r7, #32
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	603b      	str	r3, [r7, #0]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb2:	e02c      	b.n	8002f0e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eba:	d028      	beq.n	8002f0e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d007      	beq.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ec2:	f7fd fdab 	bl	8000a1c <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d21d      	bcs.n	8002f0e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ee0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0201 	bic.w	r2, r2, #1
 8002ef0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e00f      	b.n	8002f2e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	4013      	ands	r3, r2
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	bf0c      	ite	eq
 8002f1e:	2301      	moveq	r3, #1
 8002f20:	2300      	movne	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	461a      	mov	r2, r3
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d0c3      	beq.n	8002eb4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f72:	f023 030c 	bic.w	r3, r3, #12
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6812      	ldr	r2, [r2, #0]
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699a      	ldr	r2, [r3, #24]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a2c      	ldr	r2, [pc, #176]	; (800304c <UART_SetConfig+0x114>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d103      	bne.n	8002fa8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fa0:	f7ff fc52 	bl	8002848 <HAL_RCC_GetPCLK2Freq>
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	e002      	b.n	8002fae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002fa8:	f7ff fc3a 	bl	8002820 <HAL_RCC_GetPCLK1Freq>
 8002fac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009a      	lsls	r2, r3, #2
 8002fb8:	441a      	add	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc4:	4a22      	ldr	r2, [pc, #136]	; (8003050 <UART_SetConfig+0x118>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	0119      	lsls	r1, r3, #4
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009a      	lsls	r2, r3, #2
 8002fd8:	441a      	add	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fe4:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <UART_SetConfig+0x118>)
 8002fe6:	fba3 0302 	umull	r0, r3, r3, r2
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	2064      	movs	r0, #100	; 0x64
 8002fee:	fb00 f303 	mul.w	r3, r0, r3
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	3332      	adds	r3, #50	; 0x32
 8002ff8:	4a15      	ldr	r2, [pc, #84]	; (8003050 <UART_SetConfig+0x118>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003004:	4419      	add	r1, r3
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	009a      	lsls	r2, r3, #2
 8003010:	441a      	add	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	fbb2 f2f3 	udiv	r2, r2, r3
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <UART_SetConfig+0x118>)
 800301e:	fba3 0302 	umull	r0, r3, r3, r2
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	2064      	movs	r0, #100	; 0x64
 8003026:	fb00 f303 	mul.w	r3, r0, r3
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	3332      	adds	r3, #50	; 0x32
 8003030:	4a07      	ldr	r2, [pc, #28]	; (8003050 <UART_SetConfig+0x118>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	f003 020f 	and.w	r2, r3, #15
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	440a      	add	r2, r1
 8003042:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40013800 	.word	0x40013800
 8003050:	51eb851f 	.word	0x51eb851f

08003054 <__libc_init_array>:
 8003054:	b570      	push	{r4, r5, r6, lr}
 8003056:	2600      	movs	r6, #0
 8003058:	4d0c      	ldr	r5, [pc, #48]	; (800308c <__libc_init_array+0x38>)
 800305a:	4c0d      	ldr	r4, [pc, #52]	; (8003090 <__libc_init_array+0x3c>)
 800305c:	1b64      	subs	r4, r4, r5
 800305e:	10a4      	asrs	r4, r4, #2
 8003060:	42a6      	cmp	r6, r4
 8003062:	d109      	bne.n	8003078 <__libc_init_array+0x24>
 8003064:	f000 f822 	bl	80030ac <_init>
 8003068:	2600      	movs	r6, #0
 800306a:	4d0a      	ldr	r5, [pc, #40]	; (8003094 <__libc_init_array+0x40>)
 800306c:	4c0a      	ldr	r4, [pc, #40]	; (8003098 <__libc_init_array+0x44>)
 800306e:	1b64      	subs	r4, r4, r5
 8003070:	10a4      	asrs	r4, r4, #2
 8003072:	42a6      	cmp	r6, r4
 8003074:	d105      	bne.n	8003082 <__libc_init_array+0x2e>
 8003076:	bd70      	pop	{r4, r5, r6, pc}
 8003078:	f855 3b04 	ldr.w	r3, [r5], #4
 800307c:	4798      	blx	r3
 800307e:	3601      	adds	r6, #1
 8003080:	e7ee      	b.n	8003060 <__libc_init_array+0xc>
 8003082:	f855 3b04 	ldr.w	r3, [r5], #4
 8003086:	4798      	blx	r3
 8003088:	3601      	adds	r6, #1
 800308a:	e7f2      	b.n	8003072 <__libc_init_array+0x1e>
 800308c:	0800311c 	.word	0x0800311c
 8003090:	0800311c 	.word	0x0800311c
 8003094:	0800311c 	.word	0x0800311c
 8003098:	08003120 	.word	0x08003120

0800309c <memset>:
 800309c:	4603      	mov	r3, r0
 800309e:	4402      	add	r2, r0
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d100      	bne.n	80030a6 <memset+0xa>
 80030a4:	4770      	bx	lr
 80030a6:	f803 1b01 	strb.w	r1, [r3], #1
 80030aa:	e7f9      	b.n	80030a0 <memset+0x4>

080030ac <_init>:
 80030ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ae:	bf00      	nop
 80030b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030b2:	bc08      	pop	{r3}
 80030b4:	469e      	mov	lr, r3
 80030b6:	4770      	bx	lr

080030b8 <_fini>:
 80030b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ba:	bf00      	nop
 80030bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030be:	bc08      	pop	{r3}
 80030c0:	469e      	mov	lr, r3
 80030c2:	4770      	bx	lr
